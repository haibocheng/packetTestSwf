<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   applicationComplete="init();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.ttProject.controller.RtmfpController;
			import com.ttProject.controller.RtmpController;
			import com.ttProject.library.Logger;
			import com.ttProject.model.AppendDataModel;
			import com.ttProject.model.FlvDataModel;
			import com.ttProject.model.FlvModel;
			import com.ttProject.view.AppendPlayerView;
			
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			
			private var controlWindow:ControlWindow;
			public var player:AppendPlayerView; // ボリューム変更をControlWindowで実行するためにpublicである必要あり
			private var rtmpController:RtmpController = null;
			private var rtmfpController:RtmfpController = null;
			private var flvModel:FlvModel = null;
			/**
			 * 初期化
			 */
			protected function init():void {
				Logger.setup(console, Logger.INFO);
				// コントロールウィンドウ作成
				var titleWindow:TitleWindow = PopUpManager.createPopUp(this, ControlWindow, false) as TitleWindow;
				if(titleWindow is ControlWindow) {
					controlWindow = titleWindow as ControlWindow;
				}
				PopUpManager.centerPopUp(controlWindow);
				// プレーヤーの準備
				player = new AppendPlayerView();
				uiComp.addChild(player.getVideo());
				// データモデルの準備
				flvModel = new FlvModel(player);
			}
			/**
			 * rtmpの接続
			 */
			public function connectRtmp():void {
				if(rtmpController != null) {
					// 古いのが残っている場合は再生成しておく。
					flvModel.flvEnd();
					rtmpController.close();
				}
				if(rtmfpController != null) {
					rtmfpController.stopAllNodeFlvDownload();
				}
				rtmpController = new RtmpController(flvModel);
				rtmpController.connect(controlWindow.rtmpUrl.text);
			}
			/**
			 * rtmpの切断
			 */
			public function disconnectRtmp():void {
				if(rtmpController != null) {
					// 古いのが残っている場合は再生成しておく。
					flvModel.flvEnd();
					rtmpController.close();
					rtmpController = null;
				}
			}
			/**
			 * rtmfpの接続
			 */
			public function connectRtmfp():void {
				if(rtmfpController != null) {
					Logger.info("rtmfpController is not null, close them....");
					rtmfpController.close();
				}
				rtmfpController = new RtmfpController(flvModel);
				rtmfpController.connect(controlWindow.rtmfpUrl.text, controlWindow.groupName.text);
			}
			/**
			 * テストイベントキック
			 */
			public function test():void {
				rtmfpController.test();
			}
		]]>
	</fx:Script>
	<mx:Canvas>
		<mx:UIComponent id="uiComp"/>
	</mx:Canvas>
	<s:TextArea width="100%" height="100%" alpha="0.3" id="console" editable="false"/>
</s:Application>
